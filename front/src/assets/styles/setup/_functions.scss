@use 'sass:math';

$default-min-bp: 1px;
$default-max-bp: $break-narrow;

@function px-to-rem($px) {
    $rems: math.div($px, 16px) * 1rem;
    @return $rems;
}

@function px-to-em($pixels, $context: 16px) {
    @return ($pixels / $context) * 1em;
}

@function lh($pixels, $context: 16px) {
    @return ($pixels / $context);
}

@function lightness($color, $lightnessMultiplier) {
    $color: str-replace($color, 'var(');
    $color: str-replace($color, ')');
    $color-h: var(#{$color + '-h'});
    $color-s: var(#{$color + '-s'});
    $color-l: var(#{$color + '-l'});
    @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

@function fluid($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: round($slope * 100, 2);
    $intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 2);
    $min-size-rem: round(px-to-rem($min-size), 2);
    $max-size-rem: round(px-to-rem($max-size), 2);
    @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

@function round($number, $decimals: 0) {
    $n: 1;

    @if $decimals >0 {
        @for $i from 1 through $decimals {
            $n: $n * 10;
        }
    }

    @return math.div(math.round($number * $n), $n);
}
